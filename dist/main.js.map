{"version":3,"sources":["webpack://sn-code-editor/./src/main.js"],"names":["document","addEventListener","modeByModeMode","CodeMirror","modeInfo","reduce","acc","m","mode","push","modeModeAndMimeByName","name","mime","modes","Object","keys","sort","a","b","toLowerCase","localeCompare","componentRelay","workingNote","clientData","lastValue","lastUUID","editor","select","ignoreTextChange","initialLoad","save","note","saveItemWithPresave","getValue","content","text","preview_plain","preview_html","changeMode","inputMode","convertCodeMirrorMode","codeMirrorMode","extension","exec","test","findModeByExtension","findModeByMIME","firstMode","inputModeToMode","setOption","autoLoadMode","getElementById","selectedIndex","indexOf","console","error","updateVimStatus","keyMap","toggleButton","newAction","buttonClass","innerHTML","classList","remove","add","window","setKeyMap","keymap","onLanguageSelect","setDefaultLanguage","language","setComponentDataValueForKey","message","original","setTimeout","toggleVimMode","newKeyMap","getComponentDataValueForKey","commands","fromTextArea","extraKeys","lineNumbers","styleSelectedText","lineWrapping","setSize","index","length","option","createElement","value","appendChild","createSelectElements","on","ComponentRelay","targetWindow","onReady","platform","body","initialKeyMap","streamContextItem","uuid","isMetadataUpdate","getDoc","setValue","clearHistory","onReceivedNote"],"mappings":"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","file":"main.js","sourcesContent":["document.addEventListener(\"DOMContentLoaded\", function () {\n\n  const modeByModeMode = CodeMirror.modeInfo.reduce(function (acc, m) {\n    if (acc[m.mode]) {\n      acc[m.mode].push(m)\n    } else {\n      acc[m.mode] = [m]\n    }\n    return acc;\n  }, {});\n\n  const modeModeAndMimeByName = CodeMirror.modeInfo.reduce(function (acc, m) {\n    acc[m.name] = { mode: m.mode, mime: m.mime };\n    return acc;\n  }, {});\n\n  const modes = Object.keys(modeModeAndMimeByName).sort(function (a, b) {\n    return a.toLowerCase().localeCompare(b.toLowerCase());\n  });\n\n  let componentRelay;\n  let workingNote, clientData;\n  let lastValue, lastUUID;\n  let editor, select;\n  const defaultMode = \"JavaScript\";\n  let ignoreTextChange = false;\n  let initialLoad = true;\n\n  function loadComponentRelay() {\n    componentRelay = new ComponentRelay({\n      targetWindow: window,\n      onReady: () => {\n        const platform = componentRelay.platform;\n        if (platform) {\n          document.body.classList.add(platform);\n        }\n        const initialKeyMap = componentRelay.getComponentDataValueForKey(\"keyMap\") ?? \"default\";\n        window.setKeyMap(initialKeyMap);\n        updateVimStatus(initialKeyMap, true);\n      }\n    });\n\n    componentRelay.streamContextItem((note) => {\n      onReceivedNote(note);\n    });\n  }\n\n  function save() {\n    if (workingNote) {\n      // Be sure to capture this object as a variable, as this.note may be reassigned in `streamContextItem`, so by the time\n      // you modify it in the presave block, it may not be the same object anymore, so the presave values will not be applied to\n      // the right object, and it will save incorrectly.\n      let note = workingNote;\n\n      componentRelay.saveItemWithPresave(note, () => {\n        lastValue = editor.getValue();\n        note.content.text = lastValue;\n        note.clientData = clientData;\n\n        note.content.preview_plain = null;\n        note.content.preview_html = null;\n      });\n    }\n  }\n\n  function onReceivedNote(note) {\n    if (note.uuid !== lastUUID) {\n      // Note changed, reset last values\n      lastValue = null;\n      initialLoad = true;\n      lastUUID = note.uuid;\n    }\n\n    workingNote = note;\n    // Only update UI on non-metadata updates.\n    if (note.isMetadataUpdate) {\n      return;\n    }\n\n    clientData = note.clientData;\n    const mode = clientData.mode;\n\n    if (mode) {\n      changeMode(mode);\n    } else {\n      // assign editor's default from component settings\n      let defaultLanguage = componentRelay.getComponentDataValueForKey(\"language\");\n      changeMode(defaultLanguage);\n    }\n\n    if (editor) {\n      if (note.content.text !== lastValue) {\n        ignoreTextChange = true;\n        editor.getDoc().setValue(workingNote.content.text);\n        ignoreTextChange = false;\n      }\n\n      if (initialLoad) {\n        initialLoad = false;\n        editor.getDoc().clearHistory();\n      }\n    }\n  }\n\n  function loadEditor() {\n    // Handler for the save command that is mapped to the :w (write) Vim key binding.\n    CodeMirror.commands.save = function() {\n      save();\n    };\n    editor = CodeMirror.fromTextArea(document.getElementById(\"code\"), {\n      extraKeys: {\n        'Alt-F': 'findPersistent',\n      },\n      lineNumbers: true,\n      styleSelectedText: true,\n      lineWrapping: true\n    });\n    editor.setSize(\"100%\", \"100%\");\n\n    setTimeout(function () {\n      changeMode(defaultMode);\n    }, 1);\n\n    createSelectElements();\n\n    editor.on(\"change\", function() {\n      if (ignoreTextChange) {\n        return;\n      }\n      save();\n    });\n  }\n\n  function createSelectElements() {\n    select = document.getElementById(\"language-select\");\n    for (let index = 0; index < modes.length; index++) {\n      const option = document.createElement(\"option\");\n      option.value = index;\n      option.innerHTML = modes[index];\n      select.appendChild(option);\n    }\n  }\n\n  // Editor Modes\n  window.setKeyMap = function (keymap) {\n    editor.setOption(\"keyMap\", keymap);\n  }\n\n  window.onLanguageSelect = function () {\n    const language = modes[select.selectedIndex];\n    changeMode(language);\n    save();\n  }\n\n  window.setDefaultLanguage = function () {\n    const language = modes[select.selectedIndex];\n\n    // assign default language for this editor when entering notes\n    componentRelay.setComponentDataValueForKey(\"language\", language);\n\n    // show a confirmation message\n    const message = document.getElementById(\"default-label\");\n    const original = message.innerHTML;\n    message.innerHTML = \"Success\";\n    message.classList.add(\"success\");\n\n    setTimeout(function () {\n      message.classList.remove(\"success\");\n      message.innerHTML = original;\n    }, 750);\n  }\n\n  function inputModeToMode(inputMode) {\n    const convertCodeMirrorMode = function (codeMirrorMode) {\n      if (codeMirrorMode) {\n        return {\n          name: codeMirrorMode.name,\n          mode: codeMirrorMode.mode,\n          mime: codeMirrorMode.mime\n        };\n      } else {\n        return null;\n      }\n    };\n\n    const extension = /.+\\.([^.]+)$/.exec(inputMode);\n    const mime = /\\//.test(inputMode)\n\n    if (extension) {\n      return convertCodeMirrorMode(CodeMirror.findModeByExtension(extension[1]));\n    } else if (mime) {\n      return convertCodeMirrorMode(CodeMirror.findModeByMIME(mime[1]));\n    } else if (modeModeAndMimeByName[inputMode]) {\n      return {\n        name: inputMode,\n        mode: modeModeAndMimeByName[inputMode].mode,\n        mime: modeModeAndMimeByName[inputMode].mime\n      };\n    } else if (modeByModeMode[inputMode]) {\n      const firstMode = modeByModeMode[inputMode][0];\n      return {\n        name: firstMode.name,\n        mode: firstMode.mode,\n        mime: firstMode.mime\n      };\n    } else {\n      return {\n        name: inputMode,\n        mode: inputMode,\n        mime: inputMode\n      };\n    }\n  }\n\n  function changeMode(inputMode) {\n    if (!inputMode) { return; }\n\n    const mode = inputModeToMode(inputMode);\n\n    if (mode) {\n      editor.setOption(\"mode\", mode.mime);\n      CodeMirror.autoLoadMode(editor, mode.mode);\n      if (clientData) {\n        clientData.mode = mode.name;\n      }\n      document.getElementById(\"language-select\").selectedIndex = modes.indexOf(mode.name);\n    } else {\n      console.error(\"Could not find a mode corresponding to \" + inputMode);\n    }\n  }\n\n  function updateVimStatus(keyMap) {\n    const toggleButton = document.getElementById(\"toggle-vim-mode-button\");\n\n    const newAction = keyMap === \"vim\" ? \"Disable\" : \"Enable\";\n    const buttonClass = keyMap === \"vim\" ? \"danger\" : \"success\";\n\n    toggleButton.innerHTML = `${newAction} Vim mode`;\n    toggleButton.classList.remove('danger');\n    toggleButton.classList.remove('success');\n    toggleButton.classList.add(buttonClass);\n  }\n\n  window.toggleVimMode = function() {\n    let newKeyMap;\n\n    const currentKeyMap = componentRelay.getComponentDataValueForKey(\"keyMap\") ?? \"default\";\n    if (currentKeyMap === \"default\") {\n      newKeyMap = \"vim\";\n    } else {\n      newKeyMap = \"default\";\n    }\n\n    window.setKeyMap(newKeyMap);\n    componentRelay.setComponentDataValueForKey(\"keyMap\", newKeyMap);\n\n    updateVimStatus(newKeyMap);\n  }\n\n  loadEditor();\n  loadComponentRelay();\n});\n"],"sourceRoot":""}